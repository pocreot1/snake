// Generated by CoffeeScript 1.8.0
var Snake,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Snake = (function(_super) {
  __extends(Snake, _super);

  Snake.prototype.head_color = "red";

  Snake.prototype.color = "white";

  Snake.prototype.UP = 1;

  Snake.prototype.RIGHT = 2;

  Snake.prototype.DOWN = 3;

  Snake.prototype.LEFT = 4;

  function Snake(game) {
    var x, y;
    this.game = game;
    x = Math.floor(this.game.width / 2);
    y = Math.floor(this.game.height / 2);
    this.points = [[x, y - 1], [x, y], [x, y + 1]];
    this.tail = [x - 1, y + 1];
    this.direction = this.UP;
    this.draw();
  }

  Snake.prototype.move = function() {
    var next, x, y;
    x = this.points[0][0];
    y = this.points[0][1];
    switch (this.direction) {
      case this.UP:
        if (y > 0) {
          next = [x, y - 1];
        } else {
          next = [x, this.game.height - 1];
        }
        break;
      case this.RIGHT:
        if (x < this.game.width - 1) {
          next = [x + 1, y];
        } else {
          next = [0, y];
        }
        break;
      case this.DOWN:
        if (y < this.game.height - 1) {
          next = [x, y + 1];
        } else {
          next = [x, 0];
        }
        break;
      case this.LEFT:
        if (x > 0) {
          next = [x - 1, y];
        } else {
          next = [this.game.width - 1, y];
        }
    }
    if (this.is_free(next)) {
      this.points.unshift(next);
      if (next[0] === this.game.food.points[0][0] && next[1] === this.game.food.points[0][1]) {
        this.game.food.respawn();
        this.game.score.next();
      } else {
        this.tail = this.points.pop();
      }
    } else {
      this.game.started = false;
      this.game.over = true;
      this.game.stop();
      this.game.msg.show("GAME OVER! Your score <b>" + this.game.score.value + "</b>.<br>Press <b>R</b> to restart");
    }
  };

  Snake.prototype.turn_left = function() {
    if (this.direction > 1) {
      return this.direction--;
    } else {
      return this.direction = this.LEFT;
    }
  };

  Snake.prototype.turn_right = function() {
    if (this.direction < 4) {
      return this.direction++;
    } else {
      return this.direction = this.UP;
    }
  };

  Snake.prototype.is_free = function(point) {
    var a, _i, _len, _ref;
    _ref = this.points;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      a = _ref[_i];
      if (a[0] === point[0] && a[1] === point[1]) {
        return false;
      }
    }
    return true;
  };

  Snake.prototype.draw = function() {
    Snake.__super__.draw.apply(this, arguments);
    Snake.__super__.draw.call(this, [this.tail], this.game.map.color);
    return Snake.__super__.draw.call(this, [this.points[0]], this.head_color);
  };

  return Snake;

})(GameObject);
