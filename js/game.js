// Generated by CoffeeScript 1.8.0
var Game,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Game = (function() {
  Game.prototype.ESC = [27, 13, 32];

  Game.prototype.LEFT = [37, 65];

  Game.prototype.RIGHT = [39, 68];

  Game.prototype.UP = [38, 87];

  Game.prototype.DOWN = [40, 83];

  function Game(width, height, size, SPEED) {
    this.width = width != null ? width : 30;
    this.height = height != null ? height : 30;
    this.size = size != null ? size : 12;
    this.SPEED = SPEED != null ? SPEED : 5;
    this.over = false;
    this.started = false;
    this.wrapper = $("game");
    this.canvas = $("game_canvas");
    if (this.canvas != null) {
      this.canvas.remove();
    }
    this.canvas = document.createElement("canvas");
    this.canvas.setAttribute("id", "game_canvas");
    this.wrapper.appendChild(this.canvas);
    this.score = new Score(this, $("score"));
    this.map = new Map(this);
    this.snake = new Snake(this);
    this.food = new Food(this);
    window.captureEvents(Event.KEYPRESS);
    window.onkeydown = this.interupt.bind(this);
  }

  Game.prototype.interupt = function(e) {
    var key;
    if (!e) {
      if (this.started === true) {
        this.stop();
      } else {
        this.start();
      }
    } else if (!this.over) {
      e = e || window.event;
      key = e.which || e.keyCode;
      if (__indexOf.call(this.ESC, key) >= 0) {
        this.interupt();
      }
      if (__indexOf.call(this.LEFT, key) >= 0) {
        this.snake.turn_left();
      }
      if (__indexOf.call(this.RIGHT, key) >= 0) {
        this.snake.turn_right();
      }
      if (__indexOf.call(this.UP, key) >= 0) {
        this.interupt();
        if (this.SPEED < 30) {
          this.SPEED++;
        }
        this.interupt();
      }
      if (__indexOf.call(this.DOWN, key) >= 0) {
        this.interupt();
        if (this.SPEED > 1) {
          this.SPEED--;
        }
        this.interupt();
      }
    } else {
      return log("game over with score " + this.score.value);
    }
  };

  Game.prototype.stop = function() {
    clearInterval(this.interval);
    this.started = false;
  };

  Game.prototype.start = function() {
    this.interval = setInterval(this.main_loop.bind(this), 1000 / this.SPEED / 2);
    log("speed is " + this.SPEED);
    this.started = true;
  };

  Game.prototype.main_loop = function() {
    this.snake.move();
    this.snake.draw();
    this.food.draw();
  };

  Game.prototype["new"] = function(width, height, size) {
    this.stop();
    return this.constructor(width, height, size);
  };

  return Game;

})();
