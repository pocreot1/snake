// Generated by CoffeeScript 1.8.0
var Map,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Map = (function(_super) {
  __extends(Map, _super);

  Map.prototype.color = "#222";

  function Map(game) {
    var h, i, j, k, w, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _results, _results1;
    this.game = game;
    this.game.g = this.game.canvas.getContext('2d');
    this.game.canvas.width = this.game.width * this.game.size;
    this.game.canvas.height = this.game.height * this.game.size;
    this.game.wrapper.style.width = "" + this.game.canvas.width + "px";
    this.game.wrapper.style.height = "" + this.game.canvas.height + "px";
    w = (function() {
      _results = [];
      for (var _i = 0, _ref = this.game.width; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
    h = (function() {
      _results1 = [];
      for (var _j = 0, _ref1 = this.game.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; 0 <= _ref1 ? _j++ : _j--){ _results1.push(_j); }
      return _results1;
    }).apply(this);
    j = 0;
    for (_k = 0, _len = w.length; _k < _len; _k++) {
      i = w[_k];
      for (_l = 0, _len1 = h.length; _l < _len1; _l++) {
        k = h[_l];
        this.points[j++] = [w[i], h[k]];
      }
    }
    this.game.point_size = this.game.size - 2;
    this.draw_ground();
    log("Map " + this.game.width + "x" + this.game.height + " created!");
  }

  Map.prototype.draw_ground = function() {
    this.game.g.fillStyle = "#111";
    this.game.g.fillRect(0, 0, this.game.canvas.width, this.game.canvas.height);
    return this.draw();
  };

  return Map;

})(GameObject);
